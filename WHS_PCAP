#include <stdlib.h>
#include <stdio.h>
#include <pcap.h>
#include <arpa/inet.h>
#include <ctype.h>
#include "myheader.h"

void got_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *packet) {
    struct ethheader *eth = (struct ethheader *)packet;

    // IP 패킷인지 확인
    if (ntohs(eth->ether_type) == 0x0800) {
        struct ipheader *ip = (struct ipheader *)(packet + sizeof(struct ethheader));

        printf("From: %s\n", inet_ntoa(ip->iph_sourceip));
        printf("To: %s\n", inet_ntoa(ip->iph_destip));

        // TCP 패킷만 처리
        if (ip->iph_protocol == IPPROTO_TCP) {
            printf("Protocol: TCP\n");

            int ip_header_len = ip->iph_ihl * 4;
            struct tcpheader *tcp = (struct tcpheader *)(packet + sizeof(struct ethheader) + ip_header_len);

            printf("Src Port: %u\n", ntohs(tcp->tcp_sport));
            printf("Dst Port: %u\n", ntohs(tcp->tcp_dport));

            int tcp_header_len = TH_OFF(tcp) * 4;
            int total_len = ntohs(ip->iph_len);
            int payload_len = total_len - ip_header_len - tcp_header_len;

            if (payload_len > 0) {
                char *data = (char *)(packet + sizeof(struct ethheader) + ip_header_len + tcp_header_len);
                printf("Message: ");
                for (int i = 0; i < payload_len && i < 100; i++) {
                    if (isprint(data[i])) putchar(data[i]);
                    else putchar('.');
                }
                printf("\n");
            } else {
                printf("Message: (No Payload)\n");
            }
        }
    }
}

int main() {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    char filter_exp[] = "tcp";
    bpf_u_int32 net;

    // Step 1: Open live pcap session on NIC
    handle = pcap_open_live("enp0s3", BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open device: %s\n", errbuf);
        return 2;
    }

    // Step 2: Compile and apply filter
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "Bad filter - %s\n", pcap_geterr(handle));
        return 2;
    }

    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "Error setting filter - %s\n", pcap_geterr(handle));
        return 2;
    }

    // Step 3: Start packet capture loop
    pcap_loop(handle, -1, got_packet, NULL);

    pcap_close(handle);
    return 0;
}
